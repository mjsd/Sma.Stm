/*
 * Maritime Cloud Identity Registry API
 *
 * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@maritimecloud.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Sma.Stm.Ssc.Contract
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class IdentityProviderAttribute :  IEquatable<IdentityProviderAttribute>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderAttribute" /> class.
        /// </summary>
        /// <param name="attributeName">OpenId Connect or SAML2 attribute name (required).</param>
        /// <param name="attributeValue">OpenId Connect or SAML2 attribute value (required).</param>
        /// <param name="createdAt">CreatedAt.</param>
        /// <param name="updatedAt">UpdatedAt.</param>
        public IdentityProviderAttribute(string attributeName = null, string attributeValue = null, DateTime? createdAt = null, DateTime? updatedAt = null)
        {
            // to ensure "AttributeName" is required (not null)
            if (attributeName == null)
            {
                throw new InvalidDataException("AttributeName is a required property for IdentityProviderAttribute and cannot be null");
            }
            else
            {
                this.AttributeName = attributeName;
            }
            // to ensure "AttributeValue" is required (not null)
            if (attributeValue == null)
            {
                throw new InvalidDataException("AttributeValue is a required property for IdentityProviderAttribute and cannot be null");
            }
            else
            {
                this.AttributeValue = attributeValue;
            }
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            
        }

        /// <summary>
        /// OpenId Connect or SAML2 attribute name
        /// </summary>
        /// <value>OpenId Connect or SAML2 attribute name</value>
        [DataMember(Name="attributeName")]
        public string AttributeName { get; set; }

        /// <summary>
        /// OpenId Connect or SAML2 attribute value
        /// </summary>
        /// <value>OpenId Connect or SAML2 attribute value</value>
        [DataMember(Name="attributeValue")]
        public string AttributeValue { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt")]
        public DateTime? UpdatedAt { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityProviderAttribute {\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  AttributeValue: ").Append(AttributeValue).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((IdentityProviderAttribute)obj);
        }

        /// <summary>
        /// Returns true if IdentityProviderAttribute instances are equal
        /// </summary>
        /// <param name="other">Instance of IdentityProviderAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityProviderAttribute other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.AttributeName == other.AttributeName ||
                    this.AttributeName != null &&
                    this.AttributeName.Equals(other.AttributeName)
                ) && 
                (
                    this.AttributeValue == other.AttributeValue ||
                    this.AttributeValue != null &&
                    this.AttributeValue.Equals(other.AttributeValue)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.AttributeName != null)
                    hash = hash * 59 + this.AttributeName.GetHashCode();
                    if (this.AttributeValue != null)
                    hash = hash * 59 + this.AttributeValue.GetHashCode();
                    if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                    if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(IdentityProviderAttribute left, IdentityProviderAttribute right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IdentityProviderAttribute left, IdentityProviderAttribute right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
